# Generated by Django 5.1 on 2024-12-21 06:48

import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.manager
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Newsline",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=512)),
                ("content", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("published", "Published"),
                            ("draft", "Draft"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[("public", "Public"), ("restricted", "Restricted")],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("allow_comment", models.BooleanField(default=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "newslines",
            },
            managers=[
                ("published_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=124)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "avatar",
                    models.ImageField(
                        blank=True, null=True, upload_to="teams/avatars/"
                    ),
                ),
            ],
            options={
                "db_table": "teams",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("username", models.CharField(blank=True, max_length=124, unique=True)),
                ("email", models.CharField(max_length=124, unique=True)),
                ("first_name", models.CharField(max_length=64)),
                ("last_name", models.CharField(blank=True, max_length=64, null=True)),
                ("display_name", models.CharField(blank=True, max_length=124)),
                (
                    "avatar",
                    models.ImageField(
                        blank=True, null=True, upload_to="users/avatars/"
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("phone", models.CharField(blank=True, max_length=30, null=True)),
                ("is_password_expired", models.BooleanField(default=False)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_generic_email", models.BooleanField(default=True)),
                ("restricted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "verification_id",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("verification_sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "password_reset_id",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("password_reset_sent_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="Board",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=124)),
                (
                    "slug",
                    models.SlugField(
                        blank=True, editable=False, max_length=124, unique=True
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "logo",
                    models.ImageField(blank=True, null=True, upload_to="boards/logos/"),
                ),
                (
                    "cover",
                    models.ImageField(
                        blank=True, null=True, upload_to="boards/covers/"
                    ),
                ),
                ("task_number_counter", models.IntegerField(default=1)),
                ("task_prefix", models.CharField(blank=True, max_length=5)),
                ("tasks_count", models.IntegerField(default=0)),
                ("members_count", models.IntegerField(default=0)),
                ("is_estimate_enabled", models.BooleanField(default=False)),
                (
                    "estimate_type",
                    models.CharField(
                        choices=[
                            ("point", "Point"),
                            ("category", "Category"),
                            ("time", "Time"),
                        ],
                        default="time",
                        max_length=10,
                    ),
                ),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="WARN: Enabling this would make board public for other people to copy as template",
                    ),
                ),
                (
                    "is_from_template",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this board was created from a template",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        help_text="If this board was created from a template, reference to the template board",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="copies",
                        to="calyvim.board",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_boards",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "db_table": "boards",
            },
        ),
        migrations.CreateModel(
            name="BoardTeamPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("collaborator", "Collaborator"),
                            ("maintainer", "Maintainer"),
                            ("guest", "Guest"),
                        ],
                        default="collaborator",
                        max_length=20,
                    ),
                ),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_memberships",
                        to="calyvim.board",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_board_team_memberships",
                        to="calyvim.team",
                    ),
                ),
            ],
            options={
                "db_table": "board_team_permissions",
            },
        ),
        migrations.CreateModel(
            name="Estimate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("key", models.IntegerField(default=1)),
                ("description", models.TextField(blank=True, null=True)),
                ("value", models.CharField(max_length=30)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="estimates",
                        to="calyvim.board",
                    ),
                ),
            ],
            options={
                "db_table": "estimates",
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=124)),
                ("color", models.CharField(max_length=10)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="labels",
                        to="calyvim.board",
                    ),
                ),
            ],
            options={
                "db_table": "labels",
            },
        ),
        migrations.CreateModel(
            name="NewslineTeamPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "newsline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_permissions",
                        to="calyvim.newsline",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_newsline_team_permissions",
                        to="calyvim.team",
                    ),
                ),
            ],
            options={
                "db_table": "newsline_team_permissions",
            },
        ),
        migrations.CreateModel(
            name="Priority",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=124)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="priorities",
                        to="calyvim.board",
                    ),
                ),
            ],
            options={
                "verbose_name": "Priority",
                "verbose_name_plural": "Priorities",
                "db_table": "priorities",
                "ordering": ("created_at",),
            },
        ),
        migrations.CreateModel(
            name="Sprint",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=124)),
                ("description", models.TextField(blank=True, null=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("is_active", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sprints",
                        to="calyvim.board",
                    ),
                ),
            ],
            options={
                "db_table": "sprints",
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=124)),
                ("description", models.TextField(blank=True, null=True)),
                ("sequence", models.FloatField(default=10000)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="states",
                        to="calyvim.board",
                    ),
                ),
            ],
            options={
                "db_table": "states",
                "ordering": ("sequence",),
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("issue", "Issue"),
                            ("feature", "Feature"),
                            ("story", "Story"),
                            ("bug", "Bug"),
                        ],
                        default="issue",
                        max_length=10,
                    ),
                ),
                ("number", models.IntegerField(blank=True, editable=False)),
                ("name", models.CharField(blank=True, editable=False, max_length=10)),
                ("summary", models.CharField(max_length=225)),
                ("description", models.TextField(blank=True, null=True)),
                ("sequence", models.FloatField(blank=True, default=50000)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "links",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                (
                    "checklists",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(), default=list, size=None
                    ),
                ),
                ("is_archived", models.BooleanField(db_index=True, default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="board_tasks",
                        to="calyvim.board",
                    ),
                ),
                (
                    "estimate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="estimate_tasks",
                        to="calyvim.estimate",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subtasks",
                        to="calyvim.task",
                    ),
                ),
                (
                    "priority",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="priority_tasks",
                        to="calyvim.priority",
                    ),
                ),
                (
                    "sprint",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sprint_tasks",
                        to="calyvim.sprint",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="calyvim.state",
                    ),
                ),
            ],
            options={
                "db_table": "tasks",
                "ordering": ("sequence",),
            },
        ),
        migrations.CreateModel(
            name="TaskAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("attachment", models.FileField(upload_to="tasks/attachments/")),
                ("filename", models.CharField()),
                ("mime_type", models.CharField(max_length=121)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="calyvim.task",
                    ),
                ),
            ],
            options={
                "db_table": "task_attachments",
            },
        ),
        migrations.CreateModel(
            name="TaskLabel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "label",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="label_task_labels",
                        to="calyvim.label",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_labels",
                        to="calyvim.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Label",
                "verbose_name_plural": "Task Labels",
                "db_table": "task_labels",
            },
        ),
        migrations.AddField(
            model_name="task",
            name="labels",
            field=models.ManyToManyField(
                related_name="assigned_label_tasks",
                through="calyvim.TaskLabel",
                to="calyvim.label",
            ),
        ),
        migrations.CreateModel(
            name="TeamMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="calyvim.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_memberships",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "db_table": "team_memberships",
            },
        ),
        migrations.AddField(
            model_name="team",
            name="members",
            field=models.ManyToManyField(
                related_name="teams",
                through="calyvim.TeamMembership",
                to="calyvim.user",
            ),
        ),
        migrations.CreateModel(
            name="TaskComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("content", models.TextField()),
                ("comment_type", models.CharField(default="update", max_length=10)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="calyvim.task",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Comment",
                "verbose_name_plural": "Task Comments",
                "db_table": "task_comments",
            },
        ),
        migrations.CreateModel(
            name="TaskAssignee",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_assignees",
                        to="calyvim.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_task_assignees",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Assignee",
                "verbose_name_plural": "Task Assignees",
                "db_table": "task_assignees",
            },
        ),
        migrations.AddField(
            model_name="task",
            name="assignees",
            field=models.ManyToManyField(
                related_name="assigned_tasks",
                through="calyvim.TaskAssignee",
                to="calyvim.user",
            ),
        ),
        migrations.AddField(
            model_name="task",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_tasks",
                to="calyvim.user",
            ),
        ),
        migrations.CreateModel(
            name="NewslineRead",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "newsline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reads",
                        to="calyvim.newsline",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_newsline_reads",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "db_table": "newsline_reads",
            },
        ),
        migrations.CreateModel(
            name="NewslineComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("content", models.TextField()),
                (
                    "newsline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="calyvim.newsline",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_newsline_comments",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "db_table": "newsline_comments",
            },
        ),
        migrations.AddField(
            model_name="newsline",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="author_newslines",
                to="calyvim.user",
            ),
        ),
        migrations.CreateModel(
            name="BoardPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("collaborator", "Collaborator"),
                            ("maintainer", "Maintainer"),
                            ("guest", "Guest"),
                        ],
                        default="collaborator",
                        max_length=20,
                    ),
                ),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="calyvim.board",
                    ),
                ),
                (
                    "team_permission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="calyvim.boardteampermission",
                    ),
                ),
                (
                    "team_membership",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="calyvim.teammembership",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_board_permissions",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "db_table": "board_permissions",
            },
        ),
        migrations.AddField(
            model_name="board",
            name="users",
            field=models.ManyToManyField(
                related_name="boards",
                through="calyvim.BoardPermission",
                to="calyvim.user",
            ),
        ),
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="This is the name of your company, team or organization.",
                        max_length=124,
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=124, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="workspaces/logos/"
                    ),
                ),
                ("org_size", models.CharField(default="1", max_length=20)),
                (
                    "auto_assign_domain",
                    models.CharField(
                        blank=True, max_length=120, null=True, unique=True
                    ),
                ),
                ("auto_assign_membership", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_workspaces",
                        to="calyvim.user",
                    ),
                ),
            ],
            options={
                "db_table": "workspaces",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="current_workspace",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="calyvim.workspace",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teams",
                to="calyvim.workspace",
            ),
        ),
        migrations.AddField(
            model_name="newsline",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="newslines",
                to="calyvim.workspace",
            ),
        ),
        migrations.AddField(
            model_name="board",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="boards",
                to="calyvim.workspace",
            ),
        ),
        migrations.CreateModel(
            name="WorkspaceInvite",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "invitation_id",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_invites",
                        to="calyvim.user",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites",
                        to="calyvim.workspace",
                    ),
                ),
            ],
            options={
                "verbose_name": "Workspace Invite",
                "verbose_name_plural": "Workspace Invites",
                "db_table": "workspace_invites",
            },
        ),
        migrations.CreateModel(
            name="WorkspaceMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("maintainer", "Maintainer"),
                            ("collaborator", "Collaborator"),
                            ("guest", "Guest"),
                        ],
                        default="collaborator",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workspace_memberships",
                        to="calyvim.user",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="calyvim.workspace",
                    ),
                ),
            ],
            options={
                "db_table": "workspace_memberships",
            },
        ),
        migrations.AddField(
            model_name="workspace",
            name="members",
            field=models.ManyToManyField(
                related_name="workspaces",
                through="calyvim.WorkspaceMembership",
                to="calyvim.user",
            ),
        ),
        migrations.CreateModel(
            name="NewslinePermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "newsline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="calyvim.newsline",
                    ),
                ),
                (
                    "team_permission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="calyvim.newslineteampermission",
                    ),
                ),
                (
                    "team_membership",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="calyvim.teammembership",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_newsline_permissions",
                        to="calyvim.user",
                    ),
                ),
                (
                    "workspace_membership",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="calyvim.workspacemembership",
                    ),
                ),
            ],
            options={
                "db_table": "newsline_permissions",
            },
        ),
        migrations.AddField(
            model_name="boardpermission",
            name="workspace_membership",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="calyvim.workspacemembership",
            ),
        ),
        migrations.AddConstraint(
            model_name="label",
            constraint=models.UniqueConstraint(
                fields=("board", "name"), name="unqiue_label_name_per_board"
            ),
        ),
        migrations.AddConstraint(
            model_name="priority",
            constraint=models.UniqueConstraint(
                fields=("board", "name"), name="unique_priority_per_board"
            ),
        ),
        migrations.AddConstraint(
            model_name="sprint",
            constraint=models.UniqueConstraint(
                fields=("board", "name"), name="unique_sprint_name_per_board"
            ),
        ),
        migrations.AddConstraint(
            model_name="sprint",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("board",),
                name="unique_active_sprint_per_board",
            ),
        ),
        migrations.AddConstraint(
            model_name="state",
            constraint=models.UniqueConstraint(
                fields=("board", "name"), name="unique_state_per_board"
            ),
        ),
        migrations.AddConstraint(
            model_name="tasklabel",
            constraint=models.UniqueConstraint(
                fields=("task", "label"), name="unique_label_per_task"
            ),
        ),
        migrations.AddConstraint(
            model_name="teammembership",
            constraint=models.UniqueConstraint(
                fields=("team", "user"), name="unique_user_per_team"
            ),
        ),
        migrations.AddConstraint(
            model_name="taskassignee",
            constraint=models.UniqueConstraint(
                fields=("task", "user"), name="unique_assignee_per_task"
            ),
        ),
        migrations.AddConstraint(
            model_name="task",
            constraint=models.UniqueConstraint(
                fields=("board", "name"), name="unique_task_name_per_board"
            ),
        ),
        migrations.AddConstraint(
            model_name="newslineread",
            constraint=models.UniqueConstraint(
                fields=("newsline", "user"), name="unique_newsline_user_read"
            ),
        ),
        migrations.AddConstraint(
            model_name="workspacemembership",
            constraint=models.UniqueConstraint(
                fields=("workspace", "user"), name="unqiue_user_per_workspace"
            ),
        ),
    ]
